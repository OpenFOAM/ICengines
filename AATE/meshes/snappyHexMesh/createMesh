#!/bin/bash

# Usage: ./createMesh <CAD_str> <Piston_pos_str> <IV_str> <EV_str> <cylinder_scale_str>
# Example: ./createMesh 0 0 0 0 1.0

# This script generates mesh for internal combustion engine components using OpenFOAM.

# Arguments:
#   CAD_str: String representing CAD model parameter.
#   Piston_pos_str: String representing piston position parameter.
#   IV_str: String representing intake valve parameter.
#   EV_str: String representing exhaust valve parameter.
#   cylinder_scale_str: String representing liner scaling parameter.

# Instructions:
#   1. Insert your job submission script here.
#   2. Set the NSLOTS to the number of processors.
#   3. Tell the job scheduler to run from the current directory.
#   4. Source OpenFOAM.

# Check if WM_PROJECT_DIR exists
if [ ! -d "$WM_PROJECT_DIR" ]; then
    echo "Error: OpenFOAM is not installed or sourced."
    exit 1
fi

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# If the number of cores is not defined by the SLURM job, define it here
if [ -z "$NSLOTS" ]; then
    NSLOTS=24
fi

function changeInsidePoint() {
    local value="$1"
	foamDictionary  system/snappyHexMeshDict \
					-entry castellatedMeshControls/insidePoint\
					-set "$value"
}

function float_to_foam_str() {
    for value in "$@"; do
        printf "%g\n" "$value"
    done
}


CAD_str="$1"
Piston_pos_str="$2"
IV_str="$3"
EV_str="$4"
cylinder_scale_str="$5"

# Convert the string arguments back to arrays using the delimiter (comma in this case)
IFS=',' read -r -a CAD_tmp <<< "$CAD_str"
IFS=',' read -r -a Piston_pos <<< "$Piston_pos_str"
IFS=',' read -r -a EV <<< "$EV_str"
IFS=',' read -r -a IV <<< "$IV_str"
IFS=',' read -r -a cylinder_scale <<< "$cylinder_scale_str"

CAD=($(float_to_foam_str "${CAD_tmp[@]}"))

minGap=-0.00045	#m

original_Ref_len=0.003
abs_IV=$(echo "$IV" | tr -d -)
abs_EV=$(echo "$EV" | tr -d -)
abs_minGap=$(echo "$minGap" | tr -d -)

#---------------------------------Implementing Minimum Gap------------------------------------------------#
if (( $(echo "$abs_IV < $abs_minGap" | bc -l) )); then
	IV=$minGap
	Final_IntakeRef_len=0
	IntakeValveState=$(echo "CLOSED")
else
	Final_IntakeRef_len=$IV
	IntakeValveState=$(echo "OPEN")
fi


if (( $(echo "$abs_EV < $abs_minGap" | bc -l) )); then
	EV=$minGap
	Final_OutletRef_len=0
	ExhaustValveState=$(echo "CLOSED")
else
	Final_OutletRef_len=$EV
	ExhaustValveState=$(echo "OPEN")
fi

echo "Intake Valve State = $IntakeValveState, Exhaust Valve State = $ExhaustValveState"
foamCloneCase templateCase tmp_meshToMesh_$CAD

cd tmp_meshToMesh_$CAD
foamDictionary system/decomposeParDict -entry numberOfSubdomains -set $NSLOTS

tar -xzf constant/geometry.tar.gz -C constant
#------------------------------Transforming the position----------------------------------------------#
# Valves are in fully closed position which is denoted by <Name0.stl>, Piston is at TDC, it need to to be transformed/scaled to its position.
surfaceTransformPoints "translate=(0 0 $IV)" constant/geometry/iv_head_refinement0.stl constant/geometry/iv_head_refinement.stl
surfaceTransformPoints "translate=(0 0 $EV)" constant/geometry/ev_head_refinement0.stl constant/geometry/ev_head_refinement.stl
surfaceTransformPoints "translate=(0 0 $IV)" constant/geometry/iv_head0.stl constant/geometry/iv_head.stl
surfaceTransformPoints "translate=(0 0 $EV)" constant/geometry/ev_head0.stl constant/geometry/ev_head.stl
surfaceTransformPoints "translate=(0 0 $IV)" constant/geometry/iv_stem0.stl constant/geometry/iv_stem.stl
surfaceTransformPoints "translate=(0 0 $EV)" constant/geometry/ev_stem0.stl constant/geometry/ev_stem.stl
surfaceTransformPoints "translate=(0 0 $Piston_pos)" constant/geometry/piston0.stl constant/geometry/piston.stl
surfaceTransformPoints "translate=(0 0 $Piston_pos)" constant/geometry/crevice_refinement0.stl constant/geometry/crevice_refinement.stl
surfaceTransformPoints "scale=(1 1 $cylinder_scale)" constant/geometry/liner0.stl constant/geometry/liner.stl
rm -rf constant/geometry/*0.stl

#----------------------------------------------------------------------------------------------------------------------------------#


if [ "$IntakeValveState" == "CLOSED" ] && [ "$ExhaustValveState" == "CLOSED" ]; then
	changeInsidePoint "(-0.027 0.043 0.06)"

	./meshRun.sh exhaust_$CAD ExhaustClosed_blockMeshDict $CAD

	changeInsidePoint "(0.027 -0.043 0.06)"
	./meshRun.sh intake_$CAD IntakeClosed_blockMeshDict $CAD

	changeInsidePoint "(0.008 0.0 -0.007)"
	./meshRun.sh meshToMesh_$CAD Master_blockMeshDict_AllClosed $CAD
	mergeMeshes -addRegions '("'exhaust_$CAD'" "'intake_$CAD'")' -region meshToMesh_$CAD -overwrite
fi

if [ "$IntakeValveState" == "OPEN" ] && [ "$ExhaustValveState" == "CLOSED" ]; then
	changeInsidePoint "(-0.027 0.043 0.06)"
	./meshRun.sh exhaust_$CAD ExhaustClosed_blockMeshDict $CAD

	changeInsidePoint "( 0.008  0.0 -0.007)"
	./meshRun.sh meshToMesh_$CAD Master_blockMeshDict_ExhaustClosed $CAD

	mergeMeshes -addRegions '("'exhaust_$CAD'")' -region meshToMesh_$CAD -overwrite
fi

if [ "$IntakeValveState" == "CLOSED" ] && [ "$ExhaustValveState" == "OPEN" ]; then
	changeInsidePoint "(0.027 -0.043 0.06)"
	./meshRun.sh intake_$CAD IntakeClosed_blockMeshDict $CAD

	changeInsidePoint "( 0.008 0.0 -0.007)"
	./meshRun.sh meshToMesh_$CAD Master_blockMeshDict_IntakeClosed $CAD

	mergeMeshes -addRegions '("'intake_$CAD'")' -region meshToMesh_$CAD -overwrite
fi

if [ "$IntakeValveState" == "OPEN" ] && [ "$ExhaustValveState" == "OPEN" ]; then
	changeInsidePoint "( 0.008  0.0 -0.007)"
	./meshRun.sh meshToMesh_$CAD AllOpen_blockMeshDict $CAD
fi


## Preprocess the mesh

# Rotate the mesh by -90 degrees so it is in the same direction with GridPro meshes
runApplication -s $CAD  transformPoints "Rz=-90" -region meshToMesh_$CAD

# Group the residual patch names together
runApplication -s $CAD createPatch -region meshToMesh_$CAD -dict system/createPatchDict -overwrite

# Create a combustionChamber cellZone for data post-processing
runApplication -s $CAD topoSet -region meshToMesh_$CAD -dict system/topoSetDict

# Create pointZones for piston bowl and cylinder head. This utility requires dynamicMeshDict to be
# present in the meshToMesh_X folder
cp -r constant/dynamicMeshDict  constant/meshToMesh_$CAD/

runApplication -s $CAD createEngineZones -pistonBowl -cylinderHead -region meshToMesh_$CAD

# Run checkMesh and store the log inside the meshToMesh_X folder
runApplication -s $CAD checkMesh -region meshToMesh_$CAD

# Move the logs to corresponding mesh subfolders
mv log.*.$CAD constant/meshToMesh_$CAD/
mv log.*_$CAD constant/meshToMesh_$CAD/

mv constant/meshToMesh_$CAD ../snappyMeshes/constant/

cd ../
rm -rf tmp_meshToMesh_$CAD

