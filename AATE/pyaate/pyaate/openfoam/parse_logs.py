"""
Various functions to parse data from the run-time output log files generated by various OpenFOAM sovlers.
User has a responsibility to prevent potential issues rising from:
    - reduced accuracy induced by ascii write precision (user-defined in system/controlDict)
    - Time - data consistency
"""

from pathlib import Path
import subprocess
import sys
import os
import numpy as np


def parse_time(logfile):
    """
    Reads standard OpenFOAM log file, parses relevant lagrangian data and saves a text files containing the parsed information.

    Parameters:
    -----------
    logfile : path to openFOAM run-time produced log file

    Returns:
    --------
    time : Time [s]
    """
    output_dir = Path.cwd()
    f_t = Path(output_dir, '_t.tmp')
    command = 'grep -w \'Time =\' ' + str(
        logfile) + ' | awk \'NF>1{print $NF}\' > ' + str(f_t)
    subprocess.Popen(command, shell=True).wait()
    time = np.loadtxt(f_t)
    os.remove(f_t)

    return time


def parse_lagrangian(logfile, output=None):
    '''
    NOTE: Note that also function object could be utilized. See OpenFOAM-dev/src/functionObjects/lagrangian/cloudInfo/cloudInfo.H

    Reads standard OpenFOAM log file, parses relevant lagrangian data and saves a text files containing the parsed information.

    Parameters:
    -----------
    logfile : path to openFOAM run-time produced log file
    output  : output file path. If None, cwd()/lagrangian_info.txt will be utilised.

    Returns:
    --------
    time : Time [s]
    vapor_pen : Vapor penetration [m]
    liquid_pen : Liquid penetration [m]
    phase_change : Liquid to vapor phase change [kg]
    '''

    if(output is None):
        output_dir = Path.cwd()
        output = Path(output_dir, "lagrangian_info.txt")
    else:
        output_dir = Path(output).parents[0]

    if(not output_dir.exists()):
        raise ValueError("User-defined output directory does not exist " + repr(output))

    time = parse_time(logfile)

    f_vapor = Path(output_dir, '_vaporPen.tmp')
    # vapor penetration has an extra first line due to the system/controlDict based hack'ish definition
    command = 'grep \'Vapor penetration\' ' + str(
        logfile) + '| awk \'NF>1{print $NF}\' | tail -n +2 > ' + str(f_vapor)
    subprocess.Popen(command, shell=True).wait()
    vapor_pen = np.loadtxt(f_vapor)

    f_liquid = Path(output_dir, '_liquidPen.tmp')
    command = 'grep \'Liquid penetration\' ' + str(
        logfile) + '| awk \'NF>1{print $NF}\' > ' + str(f_liquid)
    subprocess.Popen(command, shell=True).wait()
    liquid_pen = np.loadtxt(f_liquid)

    f_pc = Path(output_dir, '_pc.tmp')
    command = 'grep \'Mass transfer phase change\' ' + str(
        logfile) + '| awk \'NF>1{print $NF}\' > ' + str(f_pc)
    subprocess.Popen(command, shell=True).wait()
    phase_change = np.loadtxt(f_pc)

    # in case simulation was stopped unexpectedly, number of entries in not equal.
    # Hence, we need to unify the arrays respectively
    n_lines = min(
        len(time),
        len(vapor_pen),
        len(liquid_pen),
        len(phase_change))
    time = time[:n_lines]
    vapor_pen = vapor_pen[:n_lines]
    liquid_pen = liquid_pen[:n_lines]
    phase_change = phase_change[:n_lines]

    np.savetxt(
        output, np.c_[time, vapor_pen, liquid_pen, phase_change],
        header="Lagrangian data parsed OpenFOAM log file.\n"
        "log-file: " + repr(logfile) +
        "\n"
        "Time [s] \t Vapor penetration [m] \t Liquid penetration [m] \t Phase change [kg]",
        delimiter='\t')

    os.remove(f_vapor)
    os.remove(f_liquid)
    os.remove(f_pc)

    return time, vapor_pen, liquid_pen, phase_change
