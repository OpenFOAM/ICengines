#!/bin/bash

# This script can be run as a job script in a computing cluster
# Insert your job submission script here

# 1. Source OpenFOAM
# 2. Set the NSLOTS to number of processors
# 3. Tell the job scheduler to run from current directory

# Check if argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 [coarse|fine]"
    exit 1
fi

# Validate argument
if [ "$1" != "coarse" ] && [ "$1" != "fine" ]; then
    echo "Error: Argument must be 'coarse' or 'fine'"
    exit 1
fi

# Set the value of the argument
MESH_TYPE="$1"

# Set default value for NSLOTS if not already set
NSLOTS=${NSLOTS:-36}

# Check if WM_PROJECT_DIR exists
if [ ! -d "$WM_PROJECT_DIR" ]; then
    echo "Error: OpenFOAM is not installed or sourced."
    exit 1
fi

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Clone case and prepare
runApplication -o foamCloneCase -add 0.orig caseTemplate gridProCase_$MESH_TYPE
cd gridProCase_$MESH_TYPE/

cp -r ../meshes/GridPro/$MESH_TYPE/meshToMesh_* constant/

# Copy start time mesh and initial conditions
cp -r constant/meshToMesh_0/polyMesh constant/
cp -r 0.orig 0

# Create meshTimes file
ls -d constant/meshToMesh_* | sed 's/.*meshToMesh_//' | sort -n > constant/meshTimes

# Set number of subdomains
foamDictionary system/decomposeParDict -entry numberOfSubdomains -set $NSLOTS

# Decompose all meshToMesh instances
# Alternatively to this for loop, you can also use the following (requires gnu-parallel):
# cat constant/meshTimes | parallel  --memfree 1G -j 10 decomposePar -region meshToMesh_{}
runApplication decomposePar
for meshDir in constant/meshToMesh_*; do
    runApplication -a decomposePar -region "$(basename "$meshDir")"
done

runParallel $(getApplication)
#------------------------------------------------------------------------------