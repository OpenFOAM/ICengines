#! /usr/bin/python
import os
import numpy as np
import pandas as pd
from pathlib import Path

# The following functions utilise pandas to read function object data from openfoam
# case directory with additional utilities such as appending data etc.


def last_header_line(fo_file):
    """
    Mostly, function objects produce tab-separated data files with # commented column names.
    This function reads the last commented line, assuming it yields the variable names
    in the spirit of csv data structure.
    input:
        fo_file: path to funciton object result file
    return: array of words ['x', 'y', ...]
    """
    with open(str(fo_file), 'r') as f:
        for line in f:
            if line.startswith('#'):
                header = line
            else:
                break #stop when there are no more #
    return header[1:].strip().split()


def load_data_pandas(fo_file):
    """
    Read typical OpenFOAM function object output assuming csv structure.
    Input:
        fo_file: path to data in format "case_dir/postProcessing/FO/0/FO.dat"
    return:
        data type pd.core.frame.DataFrame
    """
    header = last_header_line(fo_file)
    data = pd.read_csv(fo_file, delimiter="\s+", comment='#', names=header)
    return data


def get_latest_file(fo_dir, fo_filename, time):
    """
    Return the latest data file in case multiple restarts have occurred when running
    the OpenFOAM case. The latest post-processing data is found from "objectName_X.dat"
    file according to output definition in OpenFOAM/src/OpenFOAM/db/functionObjects/logFiles/logFiles.C
    Input:
        foDir: function object directory
        foFileName: function object data file name
        timeI: time instance (directory) at which we look for the data, equaling to the latest data file.
    Return:
        foFile: path to the latest data file.
    """
    foFileName_noExtension = fo_filename[:-4]
    foFileName_latest = foFileName_noExtension + "_" + time + ".dat"
    foFile_latest = Path(fo_dir, time, foFileName_latest)
    if(Path.is_file(foFile_latest)):
        foFile = foFile_latest
    else:
        foFile = Path(fo_dir, time, fo_filename)
    return foFile


def append_restart_data(data0, data1, verbose=True):
    """
    Append data from multiple time directories generated by restarts.
    Input:
        data0: [M,N] pandas data frame to append on, assuming the first column corresponds to time / iter instance
        data1: [M,N] pandas data frame to be appended, assuming the first column corresponds to time / iter instance
        verbose: foProperties
    return:
        data_appended: [2M,N] pandas data frame.
    """
    data_appended = data0.copy()
    t0 = data0.iloc[:,0].values
    t1 = data1.iloc[:,0].values
    if(t0[-1] >= t1[0]):
        cut_ind = np.where(t0 >= t1[0])[0][0]
        if(verbose):
            print("Appending data at t=" + repr(t0[cut_ind]) + " at index " + repr(cut_ind))
    else:
        cut_ind = len(t0)
        if(verbose):
            print("Appending data at t=" + repr(t0[-1]) + " at last index.")

    data_appended = pd.concat([data_appended[:cut_ind], data1], axis=0, ignore_index=True)

    return data_appended



def load_data(fo_file, append=True, latest=True, verbose=False):
    """
    Load OpenFOAM function object data into a pandas data frame.
    input:
        fo_file: path to the function object data file. Can be any time instance.
        append: Boolean describing whether multiple data sets generated by case restarts or
                extra post-processing are included in data loading.
        latest: Boolean describing whether the latest data file under function object dictionary is
                chosen or not. In case of multiple restarts, there are filename.dat and filename_X.dat
                files available, from which latter refers to the latest time instance.
        verbose: Print information of the loading process.
    return:
        data: Pandas data frame including the function object data.
    """
    fo_file = Path(fo_file)
    fo_dir = fo_file.parents[1]
    fo_filename = fo_file.name
    #time_dirs = os.listdir(str(fo_dir)) # does not work in python 2.7
    time_dirs = [x.name for x in fo_dir.iterdir() if x.is_dir()]
    time_dirs.sort(key=float)

    data = load_data_pandas(fo_file)

    if(append and (len(time_dirs)>1)):
        for ti in time_dirs:
            if(latest):
                file_i = get_latest_file(fo_dir, fo_filename, ti)
            else:
                file_i = Path(fo_dir, ti, fo_filename)

            if(verbose):
                str_ = Path(*list(file_i.parts)[-4:])
                print("Reading data from file " + repr(str_.as_posix()))

            data_i = load_data_pandas(file_i)
            data = append_restart_data(data, data_i, verbose=verbose)

    return data
